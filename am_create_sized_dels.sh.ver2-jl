#! /bin/bash
#
########################################################################
#
# NAME: 		am_create_sized_dles
#
# April, 22nd, 2010 	first draft by Stefan G. Weichinger
# 			suggestions by Jon LaBadie
#
# May, 27th, 2010	add commandline-options, sgw
#
# PURPOSE:
#
# For use with the amanda backup suite.
#
# Creates one or more "include-list" files from the files under a single
# starting directory.  Each of these include files will be used with a
# separate "DLE" and the total size of the files in each list will be
# less than a configurable limit.  Typically this limit will be the size
# of the backup medium.
# 
# The program was developed to backup a mythtv-backend-server.  This server
# holds hundreds of video files which are deleted and created in a very
# dynamic way.  It was necessary to generate media-fitting include-lists
# for every run.
#
# USAGE: <path_to_amanda_bin_directory>/am_create_sized_dles [options] -c AMANDA-config -d DIRECTORY
#
# Places the generated include-files into '/etc/amanda/CONFIG/includes'.
# These files can be used in your DLE via the 'include list' directive.
#
# OPTIONS:
#    -c <amanda_config>		Name of amanda configuration and part of
#				destination pathname (REQUIRED?).
#    -d <directory>		Directory to scan (REQUIRED?)
#    -s <size_limit>		Cumulative max size of files in a single
#				include file in KB (default is 100,000,000)
#    -r 
#
# EXIT STATUSES:
#     0		Program completed successfully
#    85		Program exited due to command line errors
#    80		Program exited due to invalid directory
#		(missing or permission)
#
# FILES USED:
#
# TODO:
#
#########################################################################

# Name of program striped of path
ProgName=${0##*/}

### functions

# Syntax:  usage [ [exit_status] supplemental text] 
# if no argument given, or Arg 1 is NULL, function returns
function usage {
    local Exit_Status=none Extra_Text=""
    
    case "$1" in
    [0-9]*) Exit_Status="$1" ; shift ;;
    esac

    Extra_Text="$*"

    [ "$Extra_Text" != "" ] &&
        printf "%s\n" "$Extra_Text" >&2

    printf "Usage: ${ProgName:-am_create_sized_dles} -c CONFIG -d DIRECTORY -r -s SIZE\n" >&2

    [ $Exit_Status = none ] && return

    exit $Exit_Status		# reach only if status is "none"
}

### initialization

# maximum size of one DLE (default: 100GB in KB)
TARGET_DLE_SIZE=100000000
    
# initial size of include-list
SIZE_LIST=0	# holds accumulated size of files in one list

# include filename template is "$FILE_PREFIX.$DLE_NAME.$FILE_SUFFIX"
FILE_SUFFIX=0
FILE_PREFIX="include"

# clean up include-files? (0 == no, 1 == yes)
REMOVE_INCLUDES="0"

## read options
E_OPTERROR=85
E_INVALID_DIR=80

# check for args, at least -c CONFIG is required
[ $# -eq 0 ] && usage $E_OPTERROR

while getopts ":c:d:rs:" option; do
  case $option in
    c     ) CONFIG=$OPTARG;;
    d     ) SOURCE_DIR="$OPTARG";;
    r     ) REMOVE_INCLUDES="1";;
    s     ) TARGET_DLE_SIZE=$OPTARG;;
    *     ) usage $E_OPTERROR "Invalid option, '$option', chosen." ;;
  esac
done

## END read options

INCLUDES_DIR="/etc/amanda/$CONFIG/includes"
[ -d $INCLUDES_DIR ] && [ -r $INCLUDES_DIR ] &&
  [ -w $INCLUDES_DIR ] && [ -x $INCLUDES_DIR ] ||
  usage $E_INVALID_DIR "Invalid includes directory: '$INCLUDES_DIR'"

# remove instances of "//" from source_dir before converting to "_"
SOURCE_DIR=$(printf "%s" "$SOURCE_DIR" | tr -s /)
[ -d $SOURCE_DIR ] && [ -r $SOURCE_DIR ] &&
  [ -w $SOURCE_DIR ] && [ -x $SOURCE_DIR ] ||
  usage $E_INVALID_DIR "Invalid source directory: '$SOURCE_DIR'"
DLE_NAME=${SOURCE_DIR//\//_}

# remove existing tmp-files
rm /tmp/$FILE_PREFIX.* 2> /dev/null
rm /tmp/checklist      2> /dev/null

# setup to automatically remove the above at end of execution
trap '{
    rm -f /tmp/$FILE_PREFIX.* 2> /dev/null
    rm -f /tmp/checklist      2> /dev/null
}' 0

# remove actual include-files
if [ "$REMOVE_INCLUDES" = "1" ]; then
	#echo "removing include-files"
	rm -f $INCLUDES_DIR/$FILE_PREFIX.$DLE_NAME.* 2> /dev/null
fi

#################################

# save and change IFS for execution of du command
OLDIFS=$IFS
IFS=$'\n' 

## read all files and their sizes into an array
DIR_CONTENT=( $(du -k $SOURCE_DIR/*))

# restore IFS to original value
IFS=$OLDIFS

# get length of an array
tLen=${#DIR_CONTENT[@]}

# process output of du command stored in DIR_CONTENT array
for (( i=0; i<${tLen}; i++ ))
do
        # Array DIR_CONTENT holds the output of du command above,
	# each line, representing a file and its size is in a
	# separate array element.  Format is "size(KB) name(full path)"

	# extract size and name components of one element
	SIZE_ELEMENT="${DIR_CONTENT[$i]%%[ $'\t']*}"
	NAME_ELEMENT=${DIR_CONTENT[$i]#*[ $'\t']}
	# strip path part of filename
	NAME_ELEMENT=${NAME_ELEMENT##*/}

	# debug: generate one file containing all lines for cross-check
	echo $NAME_ELEMENT >> /tmp/checklist

	if (( SIZE_LIST + SIZE_ELEMENT <= TARGET_DLE_SIZE ))
	then
		((SIZE_LIST+=SIZE_ELEMENT))
	else
		# start next list: increase suffix
		let "FILE_SUFFIX += 1"
		# reset size-counter
		SIZE_LIST=$SIZE_ELEMENT
	fi
	echo "./$NAME_ELEMENT" >> /tmp/$FILE_PREFIX.$DLE_NAME.$FILE_SUFFIX
done

cp /tmp/$FILE_PREFIX.* $INCLUDES_DIR

exit 0
